////////////////////////////////
// Generated by CodeFormatter v1.0
// 2022-08-25, 20:00:03
////////////////////////////////
#if ODIN_INSPECTOR
using Sirenix.OdinInspector;
#endif

using System.Collections.Generic;
using UnityEngine;
namespace PureMVCFramework.Entity
{
	public abstract class SystemBase<T1> : SystemBase where T1 : IComponentData 
	{
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector]
#endif
		protected EntityQuery queries;
		protected override void OnCreate()
		{
			base.OnCreate();
			queries = new EntityQuery(ComponentType.ReadWrite<T1>());
		}
		public sealed override void InjectEntity(Entity entity)
		{
			bool tf = entity.InternalGetComponentData(queries, out var components);
			if (Entities.Contains(entity))
			{
				if (!tf)
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
				}
			}
			else if (tf)
			{
				Entities.Add(entity);
				Components1.Add((T1)components[0]);
			}
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				OnUpdate(i, Entities[i], Components1[i]);
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1);
	}
	public abstract class SystemBase<T1, T2> : SystemBase where T1 : IComponentData where T2 : IComponentData 
	{
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector]
#endif
		protected EntityQuery queries;
		protected override void OnCreate()
		{
			base.OnCreate();
			queries = new EntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>());
		}
		public sealed override void InjectEntity(Entity entity)
		{
			bool tf = entity.InternalGetComponentData(queries, out var components);
			if (Entities.Contains(entity))
			{
				if (!tf)
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
				}
			}
			else if (tf)
			{
				Entities.Add(entity);
				Components1.Add((T1)components[0]);
				Components2.Add((T2)components[1]);
			}
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				OnUpdate(i, Entities[i], Components1[i], Components2[i]);
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2);
	}
	public abstract class SystemBase<T1, T2, T3> : SystemBase where T1 : IComponentData where T2 : IComponentData where T3 : IComponentData 
	{
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector]
#endif
		protected EntityQuery queries;
		protected override void OnCreate()
		{
			base.OnCreate();
			queries = new EntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>());
		}
		public sealed override void InjectEntity(Entity entity)
		{
			bool tf = entity.InternalGetComponentData(queries, out var components);
			if (Entities.Contains(entity))
			{
				if (!tf)
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
					Components3.RemoveAt(i);
				}
			}
			else if (tf)
			{
				Entities.Add(entity);
				Components1.Add((T1)components[0]);
				Components2.Add((T2)components[1]);
				Components3.Add((T3)components[2]);
			}
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i]);
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3);
	}
	public abstract class SystemBase<T1, T2, T3, T4> : SystemBase where T1 : IComponentData where T2 : IComponentData where T3 : IComponentData where T4 : IComponentData 
	{
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T4> Components4 = new List<T4>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector]
#endif
		protected EntityQuery queries;
		protected override void OnCreate()
		{
			base.OnCreate();
			queries = new EntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>(), ComponentType.ReadWrite<T4>());
		}
		public sealed override void InjectEntity(Entity entity)
		{
			bool tf = entity.InternalGetComponentData(queries, out var components);
			if (Entities.Contains(entity))
			{
				if (!tf)
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
					Components3.RemoveAt(i);
					Components4.RemoveAt(i);
				}
			}
			else if (tf)
			{
				Entities.Add(entity);
				Components1.Add((T1)components[0]);
				Components2.Add((T2)components[1]);
				Components3.Add((T3)components[2]);
				Components4.Add((T4)components[3]);
			}
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i], Components4[i]);
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3, T4 component4);
	}
	public abstract class SystemBase<T1, T2, T3, T4, T5> : SystemBase where T1 : IComponentData where T2 : IComponentData where T3 : IComponentData where T4 : IComponentData where T5 : IComponentData 
	{
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T4> Components4 = new List<T4>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T5> Components5 = new List<T5>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector]
#endif
		protected EntityQuery queries;
		protected override void OnCreate()
		{
			base.OnCreate();
			queries = new EntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>(), ComponentType.ReadWrite<T4>(), ComponentType.ReadWrite<T5>());
		}
		public sealed override void InjectEntity(Entity entity)
		{
			bool tf = entity.InternalGetComponentData(queries, out var components);
			if (Entities.Contains(entity))
			{
				if (!tf)
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
					Components3.RemoveAt(i);
					Components4.RemoveAt(i);
					Components5.RemoveAt(i);
				}
			}
			else if (tf)
			{
				Entities.Add(entity);
				Components1.Add((T1)components[0]);
				Components2.Add((T2)components[1]);
				Components3.Add((T3)components[2]);
				Components4.Add((T4)components[3]);
				Components5.Add((T5)components[4]);
			}
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i], Components4[i], Components5[i]);
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3, T4 component4, T5 component5);
	}
	public abstract class SystemBase<T1, T2, T3, T4, T5, T6> : SystemBase where T1 : IComponentData where T2 : IComponentData where T3 : IComponentData where T4 : IComponentData where T5 : IComponentData where T6 : IComponentData 
	{
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T4> Components4 = new List<T4>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T5> Components5 = new List<T5>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T6> Components6 = new List<T6>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector]
#endif
		protected EntityQuery queries;
		protected override void OnCreate()
		{
			base.OnCreate();
			queries = new EntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>(), ComponentType.ReadWrite<T4>(), ComponentType.ReadWrite<T5>(), ComponentType.ReadWrite<T6>());
		}
		public sealed override void InjectEntity(Entity entity)
		{
			bool tf = entity.InternalGetComponentData(queries, out var components);
			if (Entities.Contains(entity))
			{
				if (!tf)
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
					Components3.RemoveAt(i);
					Components4.RemoveAt(i);
					Components5.RemoveAt(i);
					Components6.RemoveAt(i);
				}
			}
			else if (tf)
			{
				Entities.Add(entity);
				Components1.Add((T1)components[0]);
				Components2.Add((T2)components[1]);
				Components3.Add((T3)components[2]);
				Components4.Add((T4)components[3]);
				Components5.Add((T5)components[4]);
				Components6.Add((T6)components[5]);
			}
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i], Components4[i], Components5[i], Components6[i]);
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3, T4 component4, T5 component5, T6 component6);
	}
	public abstract class HybridSystemBase<T1, T2> : SystemBase where T1 : Component where T2 : IComponentData 
	{
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector]
#endif
		protected EntityQuery queries;
		protected override void OnCreate()
		{
			base.OnCreate();
			queries = new EntityQuery(ComponentType.ReadWrite<T2>());
		}
		public sealed override void InjectEntity(Entity entity)
		{
			if (entity.gameObject == null)
			{
				if (Entities.Contains(entity))
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
				}
				return;
			}
			var co = entity.gameObject.GetComponent<T1>();
			bool tf = entity.InternalGetComponentData(queries, out var components) && co;
			if (Entities.Contains(entity))
			{
				if (!tf)
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
					OnEject(entity, co);
				}
			}
			else if (tf)
			{
				Entities.Add(entity);
				Components1.Add(co);
				Components2.Add((T2)components[0]);
			}
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				OnUpdate(i, Entities[i], Components1[i], Components2[i]);
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2);
		protected virtual void OnEject(Entity entity, T1 component) { }
	}
	public abstract class HybridSystemBase<T1, T2, T3> : SystemBase where T1 : Component where T2 : IComponentData where T3 : IComponentData 
	{
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector]
#endif
		protected EntityQuery queries;
		protected override void OnCreate()
		{
			base.OnCreate();
			queries = new EntityQuery(ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>());
		}
		public sealed override void InjectEntity(Entity entity)
		{
			if (entity.gameObject == null)
			{
				if (Entities.Contains(entity))
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
					Components3.RemoveAt(i);
				}
				return;
			}
			var co = entity.gameObject.GetComponent<T1>();
			bool tf = entity.InternalGetComponentData(queries, out var components) && co;
			if (Entities.Contains(entity))
			{
				if (!tf)
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
					Components3.RemoveAt(i);
					OnEject(entity, co);
				}
			}
			else if (tf)
			{
				Entities.Add(entity);
				Components1.Add(co);
				Components2.Add((T2)components[0]);
				Components3.Add((T3)components[1]);
			}
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i]);
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3);
		protected virtual void OnEject(Entity entity, T1 component) { }
	}
	public abstract class HybridSystemBase<T1, T2, T3, T4> : SystemBase where T1 : Component where T2 : IComponentData where T3 : IComponentData where T4 : IComponentData 
	{
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true)]
#endif
		private readonly List<T4> Components4 = new List<T4>();
#if ODIN_INSPECTOR
		[ShowIf("showOdinInfo"), ShowInInspector]
#endif
		protected EntityQuery queries;
		protected override void OnCreate()
		{
			base.OnCreate();
			queries = new EntityQuery(ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>(), ComponentType.ReadWrite<T4>());
		}
		public sealed override void InjectEntity(Entity entity)
		{
			if (entity.gameObject == null)
			{
				if (Entities.Contains(entity))
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
					Components3.RemoveAt(i);
					Components4.RemoveAt(i);
				}
				return;
			}
			var co = entity.gameObject.GetComponent<T1>();
			bool tf = entity.InternalGetComponentData(queries, out var components) && co;
			if (Entities.Contains(entity))
			{
				if (!tf)
				{
					var i = Entities.IndexOf(entity);
					Entities.RemoveAt(i);
					Components1.RemoveAt(i);
					Components2.RemoveAt(i);
					Components3.RemoveAt(i);
					Components4.RemoveAt(i);
					OnEject(entity, co);
				}
			}
			else if (tf)
			{
				Entities.Add(entity);
				Components1.Add(co);
				Components2.Add((T2)components[0]);
				Components3.Add((T3)components[1]);
				Components4.Add((T4)components[2]);
			}
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i], Components4[i]);
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3, T4 component4);
		protected virtual void OnEject(Entity entity, T1 component) { }
	}
}
