////////////////////////////////
// Generated by CodeFormatter v1.0
// 2022-11-17, 14:26:18
////////////////////////////////
#if ODIN_INSPECTOR
using Sirenix.OdinInspector;
#endif

using System.Collections.Generic;
using UnityEngine;
namespace PureMVCFramework.Entity
{
	public abstract class SystemBase<T1> : SystemBase where T1 : IComponentData 
	{
#if ODIN_INSPECTOR
		private static string LabelText1 = typeof(T1).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText1")]
#endif
		private readonly List<T1> Components1 = new List<T1>();
		protected override void OnCreate()
		{
			base.OnCreate();
			OverwriteEntityQuery(ComponentType.ReadWrite<T1>());
		}
		protected sealed override void ClearComponents(int index)
		{
			OnEject(Entities[index], Components1[index]);
			Components1.RemoveAt(index);
		}
		protected sealed override void CollectComponents(Entity entity, IComponentData[] components)
		{
			Components1.Add((T1)components[0]);
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				if (Entities[i].IsAlive)
				{
					OnUpdate(i, Entities[i], Components1[i]);
				}
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1);
		protected virtual void OnEject(Entity entity, T1 component1) { }
	}
	public abstract class SystemBase<T1, T2> : SystemBase where T1 : IComponentData where T2 : IComponentData 
	{
#if ODIN_INSPECTOR
		private static string LabelText1 = typeof(T1).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText1")]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		private static string LabelText2 = typeof(T2).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText2")]
#endif
		private readonly List<T2> Components2 = new List<T2>();
		protected override void OnCreate()
		{
			base.OnCreate();
			OverwriteEntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>());
		}
		protected sealed override void ClearComponents(int index)
		{
			OnEject(Entities[index], Components1[index], Components2[index]);
			Components1.RemoveAt(index);
			Components2.RemoveAt(index);
		}
		protected sealed override void CollectComponents(Entity entity, IComponentData[] components)
		{
			Components1.Add((T1)components[0]);
			Components2.Add((T2)components[1]);
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				if (Entities[i].IsAlive)
				{
					OnUpdate(i, Entities[i], Components1[i], Components2[i]);
				}
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2);
		protected virtual void OnEject(Entity entity, T1 component1, T2 component2) { }
	}
	public abstract class SystemBase<T1, T2, T3> : SystemBase where T1 : IComponentData where T2 : IComponentData where T3 : IComponentData 
	{
#if ODIN_INSPECTOR
		private static string LabelText1 = typeof(T1).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText1")]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		private static string LabelText2 = typeof(T2).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText2")]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		private static string LabelText3 = typeof(T3).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText3")]
#endif
		private readonly List<T3> Components3 = new List<T3>();
		protected override void OnCreate()
		{
			base.OnCreate();
			OverwriteEntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>());
		}
		protected sealed override void ClearComponents(int index)
		{
			OnEject(Entities[index], Components1[index], Components2[index], Components3[index]);
			Components1.RemoveAt(index);
			Components2.RemoveAt(index);
			Components3.RemoveAt(index);
		}
		protected sealed override void CollectComponents(Entity entity, IComponentData[] components)
		{
			Components1.Add((T1)components[0]);
			Components2.Add((T2)components[1]);
			Components3.Add((T3)components[2]);
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				if (Entities[i].IsAlive)
				{
					OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i]);
				}
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3);
		protected virtual void OnEject(Entity entity, T1 component1, T2 component2, T3 component3) { }
	}
	public abstract class SystemBase<T1, T2, T3, T4> : SystemBase where T1 : IComponentData where T2 : IComponentData where T3 : IComponentData where T4 : IComponentData 
	{
#if ODIN_INSPECTOR
		private static string LabelText1 = typeof(T1).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText1")]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		private static string LabelText2 = typeof(T2).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText2")]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		private static string LabelText3 = typeof(T3).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText3")]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		private static string LabelText4 = typeof(T4).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText4")]
#endif
		private readonly List<T4> Components4 = new List<T4>();
		protected override void OnCreate()
		{
			base.OnCreate();
			OverwriteEntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>(), ComponentType.ReadWrite<T4>());
		}
		protected sealed override void ClearComponents(int index)
		{
			OnEject(Entities[index], Components1[index], Components2[index], Components3[index], Components4[index]);
			Components1.RemoveAt(index);
			Components2.RemoveAt(index);
			Components3.RemoveAt(index);
			Components4.RemoveAt(index);
		}
		protected sealed override void CollectComponents(Entity entity, IComponentData[] components)
		{
			Components1.Add((T1)components[0]);
			Components2.Add((T2)components[1]);
			Components3.Add((T3)components[2]);
			Components4.Add((T4)components[3]);
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				if (Entities[i].IsAlive)
				{
					OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i], Components4[i]);
				}
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3, T4 component4);
		protected virtual void OnEject(Entity entity, T1 component1, T2 component2, T3 component3, T4 component4) { }
	}
	public abstract class SystemBase<T1, T2, T3, T4, T5> : SystemBase where T1 : IComponentData where T2 : IComponentData where T3 : IComponentData where T4 : IComponentData where T5 : IComponentData 
	{
#if ODIN_INSPECTOR
		private static string LabelText1 = typeof(T1).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText1")]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		private static string LabelText2 = typeof(T2).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText2")]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		private static string LabelText3 = typeof(T3).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText3")]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		private static string LabelText4 = typeof(T4).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText4")]
#endif
		private readonly List<T4> Components4 = new List<T4>();
#if ODIN_INSPECTOR
		private static string LabelText5 = typeof(T5).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText5")]
#endif
		private readonly List<T5> Components5 = new List<T5>();
		protected override void OnCreate()
		{
			base.OnCreate();
			OverwriteEntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>(), ComponentType.ReadWrite<T4>(), ComponentType.ReadWrite<T5>());
		}
		protected sealed override void ClearComponents(int index)
		{
			OnEject(Entities[index], Components1[index], Components2[index], Components3[index], Components4[index], Components5[index]);
			Components1.RemoveAt(index);
			Components2.RemoveAt(index);
			Components3.RemoveAt(index);
			Components4.RemoveAt(index);
			Components5.RemoveAt(index);
		}
		protected sealed override void CollectComponents(Entity entity, IComponentData[] components)
		{
			Components1.Add((T1)components[0]);
			Components2.Add((T2)components[1]);
			Components3.Add((T3)components[2]);
			Components4.Add((T4)components[3]);
			Components5.Add((T5)components[4]);
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				if (Entities[i].IsAlive)
				{
					OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i], Components4[i], Components5[i]);
				}
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3, T4 component4, T5 component5);
		protected virtual void OnEject(Entity entity, T1 component1, T2 component2, T3 component3, T4 component4, T5 component5) { }
	}
	public abstract class SystemBase<T1, T2, T3, T4, T5, T6> : SystemBase where T1 : IComponentData where T2 : IComponentData where T3 : IComponentData where T4 : IComponentData where T5 : IComponentData where T6 : IComponentData 
	{
#if ODIN_INSPECTOR
		private static string LabelText1 = typeof(T1).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText1")]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		private static string LabelText2 = typeof(T2).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText2")]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		private static string LabelText3 = typeof(T3).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText3")]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		private static string LabelText4 = typeof(T4).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText4")]
#endif
		private readonly List<T4> Components4 = new List<T4>();
#if ODIN_INSPECTOR
		private static string LabelText5 = typeof(T5).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText5")]
#endif
		private readonly List<T5> Components5 = new List<T5>();
#if ODIN_INSPECTOR
		private static string LabelText6 = typeof(T6).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText6")]
#endif
		private readonly List<T6> Components6 = new List<T6>();
		protected override void OnCreate()
		{
			base.OnCreate();
			OverwriteEntityQuery(ComponentType.ReadWrite<T1>(), ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>(), ComponentType.ReadWrite<T4>(), ComponentType.ReadWrite<T5>(), ComponentType.ReadWrite<T6>());
		}
		protected sealed override void ClearComponents(int index)
		{
			OnEject(Entities[index], Components1[index], Components2[index], Components3[index], Components4[index], Components5[index], Components6[index]);
			Components1.RemoveAt(index);
			Components2.RemoveAt(index);
			Components3.RemoveAt(index);
			Components4.RemoveAt(index);
			Components5.RemoveAt(index);
			Components6.RemoveAt(index);
		}
		protected sealed override void CollectComponents(Entity entity, IComponentData[] components)
		{
			Components1.Add((T1)components[0]);
			Components2.Add((T2)components[1]);
			Components3.Add((T3)components[2]);
			Components4.Add((T4)components[3]);
			Components5.Add((T5)components[4]);
			Components6.Add((T6)components[5]);
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				if (Entities[i].IsAlive)
				{
					OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i], Components4[i], Components5[i], Components6[i]);
				}
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3, T4 component4, T5 component5, T6 component6);
		protected virtual void OnEject(Entity entity, T1 component1, T2 component2, T3 component3, T4 component4, T5 component5, T6 component6) { }
	}
	public abstract class HybridSystemBase<T1, T2> : SystemBase where T1 : Component where T2 : IComponentData 
	{
#if ODIN_INSPECTOR
		private static string LabelText1 = typeof(T1).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText1")]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		private static string LabelText2 = typeof(T2).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText2")]
#endif
		private readonly List<T2> Components2 = new List<T2>();
		protected override void OnCreate()
		{
			base.OnCreate();
			OverwriteEntityQuery(ComponentType.ReadWrite<T2>());
		}
		protected sealed override bool CheckEntityVaild(Entity entity, out IComponentData[] components)
		{
			components = null;;
			return entity.gameObject != null && entity.gameObject.GetComponent<T1>() != null && base.CheckEntityVaild(entity, out components);
		}
		protected sealed override void ClearComponents(int index)
		{
			OnEject(Entities[index], Components1[index], Components2[index]);
			Components1.RemoveAt(index);
			Components2.RemoveAt(index);
		}
		protected sealed override void CollectComponents(Entity entity, IComponentData[] components)
		{
			Components1.Add(entity.gameObject.GetComponent<T1>());
			Components2.Add((T2)components[0]);
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				if (Entities[i].IsAlive)
				{
					OnUpdate(i, Entities[i], Components1[i], Components2[i]);
				}
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2);
		protected virtual void OnEject(Entity entity, T1 component1, T2 component2) { }
	}
	public abstract class HybridSystemBase<T1, T2, T3> : SystemBase where T1 : Component where T2 : IComponentData where T3 : IComponentData 
	{
#if ODIN_INSPECTOR
		private static string LabelText1 = typeof(T1).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText1")]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		private static string LabelText2 = typeof(T2).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText2")]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		private static string LabelText3 = typeof(T3).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText3")]
#endif
		private readonly List<T3> Components3 = new List<T3>();
		protected override void OnCreate()
		{
			base.OnCreate();
			OverwriteEntityQuery(ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>());
		}
		protected sealed override bool CheckEntityVaild(Entity entity, out IComponentData[] components)
		{
			components = null;;
			return entity.gameObject != null && entity.gameObject.GetComponent<T1>() != null && base.CheckEntityVaild(entity, out components);
		}
		protected sealed override void ClearComponents(int index)
		{
			OnEject(Entities[index], Components1[index], Components2[index], Components3[index]);
			Components1.RemoveAt(index);
			Components2.RemoveAt(index);
			Components3.RemoveAt(index);
		}
		protected sealed override void CollectComponents(Entity entity, IComponentData[] components)
		{
			Components1.Add(entity.gameObject.GetComponent<T1>());
			Components2.Add((T2)components[0]);
			Components3.Add((T3)components[1]);
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				if (Entities[i].IsAlive)
				{
					OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i]);
				}
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3);
		protected virtual void OnEject(Entity entity, T1 component1, T2 component2, T3 component3) { }
	}
	public abstract class HybridSystemBase<T1, T2, T3, T4> : SystemBase where T1 : Component where T2 : IComponentData where T3 : IComponentData where T4 : IComponentData 
	{
#if ODIN_INSPECTOR
		private static string LabelText1 = typeof(T1).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText1")]
#endif
		private readonly List<T1> Components1 = new List<T1>();
#if ODIN_INSPECTOR
		private static string LabelText2 = typeof(T2).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText2")]
#endif
		private readonly List<T2> Components2 = new List<T2>();
#if ODIN_INSPECTOR
		private static string LabelText3 = typeof(T3).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText3")]
#endif
		private readonly List<T3> Components3 = new List<T3>();
#if ODIN_INSPECTOR
		private static string LabelText4 = typeof(T4).Name;
		[ShowIf("showOdinInfo"), ShowInInspector, ListDrawerSettings(IsReadOnly = true), LabelText("$LabelText4")]
#endif
		private readonly List<T4> Components4 = new List<T4>();
		protected override void OnCreate()
		{
			base.OnCreate();
			OverwriteEntityQuery(ComponentType.ReadWrite<T2>(), ComponentType.ReadWrite<T3>(), ComponentType.ReadWrite<T4>());
		}
		protected sealed override bool CheckEntityVaild(Entity entity, out IComponentData[] components)
		{
			components = null;;
			return entity.gameObject != null && entity.gameObject.GetComponent<T1>() != null && base.CheckEntityVaild(entity, out components);
		}
		protected sealed override void ClearComponents(int index)
		{
			OnEject(Entities[index], Components1[index], Components2[index], Components3[index], Components4[index]);
			Components1.RemoveAt(index);
			Components2.RemoveAt(index);
			Components3.RemoveAt(index);
			Components4.RemoveAt(index);
		}
		protected sealed override void CollectComponents(Entity entity, IComponentData[] components)
		{
			Components1.Add(entity.gameObject.GetComponent<T1>());
			Components2.Add((T2)components[0]);
			Components3.Add((T3)components[1]);
			Components4.Add((T4)components[2]);
		}
		protected sealed override void OnUpdate()
		{
			for (int i = 0; i < Entities.Count; ++i)
			{
				if (Entities[i].IsAlive)
				{
					OnUpdate(i, Entities[i], Components1[i], Components2[i], Components3[i], Components4[i]);
				}
			}
		}
		protected abstract void OnUpdate(int index, Entity entity, T1 component1, T2 component2, T3 component3, T4 component4);
		protected virtual void OnEject(Entity entity, T1 component1, T2 component2, T3 component3, T4 component4) { }
	}
}
